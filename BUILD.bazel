package(default_visibility = ["//visibility:public"])

# Generate parser from bison grammar using modern bison
genrule(
    name = "bf_parser",
    srcs = ["bf_parser.y"],
    outs = ["bf_parser.c", "bf_parser.h"],
    cmd = "PATH=/opt/homebrew/opt/bison/bin:$$PATH bison -d -o $(location bf_parser.c) $(location bf_parser.y)",
)

# Generate lexer from flex grammar using system flex
genrule(
    name = "bf_lexer",
    srcs = ["bf_lexer.l", ":bf_parser"],
    outs = ["bf_lexer.c"],
    cmd = "flex -o $(location bf_lexer.c) $(location bf_lexer.l)",
)

# Generate ARM64 DynASM file
genrule(
    name = "bf_arm64_dasc",
    srcs = [
        "bf_arm64.dasc",
    ] + glob(["luajit/dynasm/*.lua"]),
    outs = ["bf_arm64.c"],
    cmd = "luajit luajit/dynasm/dynasm.lua -o $(OUTS) $(location bf_arm64.dasc)",
)

# Generate AMD64 DynASM file  
genrule(
    name = "bf_amd64_dasc",
    srcs = [
        "bf_amd64.dasc", 
    ] + glob(["luajit/dynasm/*.lua"]),
    outs = ["bf_amd64.c"],
    cmd = "luajit luajit/dynasm/dynasm.lua -o $(OUTS) $(location bf_amd64.dasc)",
)

# Core components library  
cc_library(
    name = "bf_components",
    srcs = [
        "bf_ast.c",
        "bf_prof.c",
        "bf_debug.c",
        ":bf_parser",
        ":bf_lexer",
    ],
    hdrs = [
        "bf_ast.h",
        "bf_prof.h",
        "bf_debug.h",
        ":bf_parser",
    ],
    copts = [
        "-Wall",
        "-Wextra",
        "-O2",
        "-g",
        "-std=c99",
    ],
)

# DynASM headers library
cc_library(
    name = "dynasm_headers",
    hdrs = [
        "luajit/dynasm/dasm_proto.h",
        "luajit/dynasm/dasm_arm64.h", 
        "luajit/dynasm/dasm_x86.h",
    ],
    includes = ["luajit/dynasm"],
)

# JIT library with DynASM generated files available for inclusion
cc_library(
    name = "bf_jit",
    hdrs = [
        ":bf_arm64_dasc",
        ":bf_amd64_dasc", 
    ],
    deps = [":dynasm_headers"],
)

# Main Brainfuck JIT compiler binary
cc_binary(
    name = "bf",
    srcs = [
        "bf.c",
    ],
    deps = [
        ":bf_components",
        ":bf_jit",
    ],
    copts = [
        "-Wall",
        "-Wextra",
        "-O2",
        "-g", 
        "-std=c99",
    ],
)