|.arch arm64
|.actionlist actions
|.section code

// ARM64-specific wrapper functions
static int putchar_wrapper(int c) {
    return putchar(c);
}

static int getchar_wrapper(void) {
    int c = getchar();
    if (c == EOF) return 0;
    return c;
}

// ARM64-specific copy cell optimization (copy only, no clearing)
static void compile_bf_copy_cell(dasm_State **Dst, int src_offset, int dst_offset) {
    // Load from source cell
    if (src_offset >= -256 && src_offset <= 255) {
        |  ldrb w0, [x19, #src_offset]   // Load from source cell at offset
    } else {
        |  add x19, x19, #src_offset     // Add src_offset to pointer
        |  ldrb w0, [x19]                // Load from adjusted pointer
        |  sub x19, x19, #src_offset     // Restore pointer
    }

    // Add to destination cell
    if (dst_offset >= -256 && dst_offset <= 255) {
        |  ldrb w1, [x19, #dst_offset]   // Load current destination value
        |  add w0, w0, w1                // Add source to destination
        |  strb w0, [x19, #dst_offset]   // Store to destination cell at offset
    } else {
        |  add x19, x19, #dst_offset     // Add dst_offset to pointer
        |  ldrb w1, [x19]                // Load current destination value
        |  add w0, w0, w1                // Add source to destination
        |  strb w0, [x19]                // Store to destination cell
        |  sub x19, x19, #dst_offset     // Restore pointer
    }
    // Note: Source cell clearing is now handled by explicit SET_CONST(0)
}

// ARM64-specific multiplication optimization  
static void compile_bf_mul(dasm_State **Dst, int multiplier, int src_offset, int dst_offset) {
    // Skip zero multiplier
    if (multiplier == 0) return;
    
    // Load source value
    if (src_offset >= -256 && src_offset <= 255) {
        |  ldrb w0, [x19, #src_offset]   // Load from source cell at offset
    } else {
        |  add x19, x19, #src_offset     // Add src_offset to pointer
        |  ldrb w0, [x19]                // Load from adjusted pointer
        |  sub x19, x19, #src_offset     // Restore pointer
    }
    
    // Compute target address in x16 (caller-saved)
    if (dst_offset >= 0) {
        |  add x16, x19, #dst_offset
    } else {
        |  sub x16, x19, #(-dst_offset)
    }
    |  ldrb w1, [x16]           // Load target value
    |  mov w2, #multiplier      // Load multiplier
    |  mul w3, w0, w2           // Multiply source * multiplier
    |  add w1, w1, w3           // Add to target
    |  strb w1, [x16]           // Store result
}

static void compile_bf_prologue(dasm_State **Dst) {
    |  stp x29, x30, [sp, #-32]!
    |  mov x29, sp
    |  str x19, [sp, #16]
    |  mov x19, x0
}

static void compile_bf_epilogue(dasm_State **Dst) {
    |  mov w0, #0
    |  ldr x19, [sp, #16]
    |  ldp x29, x30, [sp], #32
    |  ret
}

static void compile_bf_loop_start(dasm_State **Dst, int loop_end) {
    |  ldrb w0, [x19]
    |  cbz w0, =>(loop_end)
}

static void compile_bf_loop_end(dasm_State **Dst, int back_to_start) {
    |  ldrb w0, [x19]
    |  cbnz w0, =>(back_to_start)
}

static void compile_bf_label(dasm_State **Dst, int label) {
    |=>(label):
}

// AST-based compilation wrapper functions
static void compile_bf_move_ptr(dasm_State **Dst, int count) {
    if (count > 0) {
        if (count == 1) {
            |  add x19, x19, #1
        } else if (count <= 4095) {
            |  add x19, x19, #count
        } else {
            // Handle large counts that don't fit in immediate
            |  mov x16, #count
            |  add x19, x19, x16
        }
    } else if (count < 0) {
        int abs_count = -count;
        if (abs_count == 1) {
            |  sub x19, x19, #1
        } else if (abs_count <= 4095) {
            |  sub x19, x19, #abs_count
        } else {
            // Handle large counts that don't fit in immediate
            |  mov x16, #abs_count
            |  sub x19, x19, x16
        }
    }
}

static void compile_bf_add_val(dasm_State **Dst, int count, int offset) {
    if (offset == 0) {
        // Normal ADD at current position
        if (count > 0) {
            if (count == 1) {
                |  ldrb w0, [x19]
                |  add w0, w0, #1
                |  strb w0, [x19]
            } else if (count <= 255) {
                |  ldrb w0, [x19]
                |  add w0, w0, #count
                |  strb w0, [x19]
            } else {
                // Handle large counts or overflow
                |  ldrb w0, [x19]
                |  mov w16, #count
                |  add w0, w0, w16
                |  strb w0, [x19]
            }
        } else if (count < 0) {
            int abs_count = -count;
            if (abs_count == 1) {
                |  ldrb w0, [x19]
                |  sub w0, w0, #1
                |  strb w0, [x19]
            } else if (abs_count <= 255) {
                |  ldrb w0, [x19]
                |  sub w0, w0, #abs_count
                |  strb w0, [x19]
            } else {
                // Handle large counts or overflow
                |  ldrb w0, [x19]
                |  mov w16, #abs_count
                |  sub w0, w0, w16
                |  strb w0, [x19]
            }
        }
    } else {
        // ADD at offset
        if (count > 0) {
            if (count == 1 && offset >= -256 && offset <= 255) {
                |  ldrb w0, [x19, #offset]       // Load from offset
                |  add w0, w0, #1                // Increment
                |  strb w0, [x19, #offset]       // Store back at offset
            } else if (count <= 255 && offset >= -256 && offset <= 255) {
                |  ldrb w0, [x19, #offset]       // Load from offset
                |  add w0, w0, #count            // Add value
                |  strb w0, [x19, #offset]       // Store back at offset
            } else {
                |  add x19, x19, #offset         // Add offset to pointer
                |  ldrb w0, [x19]                // Load from adjusted pointer
                |  add w0, w0, #count            // Add value
                |  strb w0, [x19]                // Store back
                |  sub x19, x19, #offset         // Restore pointer
            }
        } else if (count < 0) {
            if (count == -1 && offset >= -256 && offset <= 255) {
                |  ldrb w0, [x19, #offset]       // Load from offset
                |  sub w0, w0, #1                // Decrement
                |  strb w0, [x19, #offset]       // Store back at offset
            } else if (count >= -255 && offset >= -256 && offset <= 255) {
                |  ldrb w0, [x19, #offset]       // Load from offset
                |  sub w0, w0, #(-count)         // Subtract value
                |  strb w0, [x19, #offset]       // Store back at offset
            } else {
                |  add x19, x19, #offset         // Add offset to pointer
                |  ldrb w0, [x19]                // Load from adjusted pointer
                |  sub w0, w0, #(-count)         // Subtract value
                |  strb w0, [x19]                // Store back
                |  sub x19, x19, #offset         // Restore pointer
            }
        }
    }
}

static void compile_bf_input(dasm_State **Dst, int offset) {
    |  mov x16, #(uintptr_t)getchar_wrapper & 0xffff
    |  movk x16, #((uintptr_t)getchar_wrapper >> 16) & 0xffff, lsl #16
    |  movk x16, #((uintptr_t)getchar_wrapper >> 32) & 0xffff, lsl #32
    |  movk x16, #((uintptr_t)getchar_wrapper >> 48) & 0xffff, lsl #48
    |  blr x16
    if (offset >= -256 && offset <= 255) {
        |  strb w0, [x19, #offset]             // Store result at offset
    } else {
        |  add x19, x19, #offset              // Add offset to pointer
        |  strb w0, [x19]                     // Store result at adjusted pointer
        |  sub x19, x19, #offset              // Restore pointer
    }
}

static void compile_bf_output(dasm_State **Dst, int offset) {
    if (offset >= -256 && offset <= 255) {
        |  ldrb w0, [x19, #offset]            // Load byte from offset
    } else {
        |  add x19, x19, #offset              // Add offset to pointer
        |  ldrb w0, [x19]                     // Load byte from adjusted pointer
        |  sub x19, x19, #offset              // Restore pointer
    }
    |  sxtb w0, w0
    |  mov x16, #(uintptr_t)putchar_wrapper & 0xffff
    |  movk x16, #((uintptr_t)putchar_wrapper >> 16) & 0xffff, lsl #16
    |  movk x16, #((uintptr_t)putchar_wrapper >> 32) & 0xffff, lsl #32
    |  movk x16, #((uintptr_t)putchar_wrapper >> 48) & 0xffff, lsl #48
    |  blr x16
}

// ARM64-specific set constant optimization
static void compile_bf_set_const(dasm_State **Dst, int value, int offset) {
    if (offset >= -256 && offset <= 255) {
        if (value == 0) {
            |  mov w0, #0                     // Load zero
            |  strb w0, [x19, #offset]        // Set to zero at offset
        } else if (value > 0 && value <= 255) {
            |  mov w0, #value                 // Load positive value
            |  strb w0, [x19, #offset]        // Set value at offset
        } else {
            |  mov w0, #(value & 0xFF)        // Load value (truncate to byte)
            |  strb w0, [x19, #offset]        // Set value at offset
        }
    } else {
        |  add x19, x19, #offset          // Add offset to pointer
        if (value == 0) {
            |  mov w0, #0                     // Load zero
            |  strb w0, [x19]                 // Set to zero
        } else if (value > 0 && value <= 255) {
            |  mov w0, #value                 // Load positive value
            |  strb w0, [x19]                 // Set value
        } else {
            |  mov w0, #(value & 0xFF)        // Load value (truncate to byte)
            |  strb w0, [x19]                 // Set value
        }
        |  sub x19, x19, #offset          // Restore pointer
    }
}
